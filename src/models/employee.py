"""
Employee Data Model

This module defines the Employee data model using Python's dataclass.
The Employee class represents an individual employee record with all
necessary fields for the Employee Data Generator application.

The dataclass provides automatic generation of __init__, __repr__, and
other special methods, making it ideal for data transfer objects.

"""

from dataclasses import dataclass
from datetime import date
from typing import Dict, Any


@dataclass
class Employee:
    """
    Represents an employee record with all required fields.

    This dataclass encapsulates employee information including personal
    details, employment data, and organizational information. It serves
    as the core data structure throughout the application.

    Attributes:
        emp_id (int): Unique employee identifier (auto-incrementing)
        full_name (str): Employee's full name (generated by Faker)
        department (str): Department name from predefined list
        salary (float): Annual salary in dollars (25,000 - 120,000 range)
        hire_date (date): Date of hire (between 2020-01-01 and today)

    Example:
        >>> emp = Employee(
        ...     emp_id=1,
        ...     full_name="John Doe",
        ...     department="IT",
        ...     salary=75000.50,
        ...     hire_date=date(2023, 1, 15)
        ... )
        >>> emp.to_dict()
        {'emp_id': 1, 'full_name': 'John Doe', 'department': 'IT',
         'salary': 75000.5, 'hire_date': datetime.date(2023, 1, 15)}
    """

    emp_id: int
    full_name: str
    department: str
    salary: float
    hire_date: date

    def to_dict(self) -> Dict[str, Any]:
        """
        Convert employee data to dictionary format.

        This method provides a clean dictionary representation of the
        employee data, suitable for JSON serialization, DataFrame creation,
        or other data processing operations.

        Returns:
            Dict[str, Any]: Dictionary containing all employee fields

        Example:
            >>> emp = Employee(1, "John Doe", "IT", 75000.50, date(2023, 1, 15))
            >>> emp.to_dict()
            {'emp_id': 1, 'full_name': 'John Doe', 'department': 'IT',
             'salary': 75000.5, 'hire_date': datetime.date(2023, 1, 15)}
        """
        return {
            'emp_id': self.emp_id,
            'full_name': self.full_name,
            'department': self.department,
            'salary': self.salary,
            'hire_date': self.hire_date
        }

    def __str__(self) -> str:
        """
        Return a human-readable string representation.

        Returns:
            str: Formatted string with employee information
        """
        return f"Employee(id={self.emp_id}, name='{self.full_name}', dept='{self.department}', salary=${self.salary:,.2f})"

    def __post_init__(self):
        """
        Validate data after initialization.

        Performs basic validation to ensure data integrity.
        Called automatically after __init__ in dataclasses.
        """
        if self.emp_id < 1:
            raise ValueError("Employee ID must be positive")

        if not self.full_name.strip():
            raise ValueError("Full name cannot be empty")

        if self.salary < 0:
            raise ValueError("Salary cannot be negative")

        if self.hire_date > date.today():
            raise ValueError("Hire date cannot be in the future")